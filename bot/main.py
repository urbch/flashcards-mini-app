from aiogram import Bot, Dispatcher, types
from aiogram.filters.command import Command
from aiogram.types import Message, WebAppInfo
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from datetime import datetime
import asyncio
from dotenv import load_dotenv
import os
import logging
import pytz
import re

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

load_dotenv()
TOKEN = os.getenv("BOT_TOKEN")
if not TOKEN:
    raise ValueError("BOT_TOKEN not found in environment variables")

bot = Bot(token=TOKEN)
dp = Dispatcher()

users = {}

NOTIFICATION_MESSAGE = "–ü—Ä–∏–≤–µ—Ç! –í—Ä–µ–º—è –ø–æ–≤—Ç–æ—Ä–∏—Ç—å —Ç–≤–æ–∏ –∫–∞—Ä—Ç–æ—á–∫–∏!"
# –¢–µ–∫—Å—Ç –æ–ø–∏—Å–∞–Ω–∏—è –¥–ª—è –∫–æ–º–∞–Ω–¥—ã /info
INFO_TEXT = """
–ù–∞—à–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ Flashcards –ø–æ–º–æ–∂–µ—Ç –≤–∞–º –±—ã—Å—Ç—Ä–æ –∏ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ –∑–∞–ø–æ–º–Ω–∏—Ç—å —É—á–µ–±–Ω—ã–π –º–∞—Ç–µ—Ä–∏–∞–ª! üìö –°–æ–∑–¥–∞–≤–∞–π—Ç–µ –∫–æ–ª–æ–¥—ã —Å –∫–∞—Ä—Ç–æ—á–∫–∞–º–∏, –∏–∑—É—á–∞–π—Ç–µ –∏—Ö –∏ –∑–∞–∫—Ä–µ–ø–ª—è–π—Ç–µ –∑–Ω–∞–Ω–∏—è.

üåê –•–æ—Ç–∏—Ç–µ –∏–∑—É—á–∞—Ç—å –∞–Ω–≥–ª–∏–π—Å–∫–∏–π —è–∑—ã–∫? –°–æ–∑–¥–∞–π—Ç–µ —è–∑—ã–∫–æ–≤—É—é –∫–æ–ª–æ–¥—É! –í—ã–±–µ—Ä–∏—Ç–µ –∏—Å—Ö–æ–¥–Ω—ã–π –∏ —Ü–µ–ª–µ–≤–æ–π —è–∑—ã–∫ (–∞–Ω–≥–ª–∏–π—Å–∫–∏–π ‚Üí —Ä—É—Å—Å–∫–∏–π –∏–ª–∏ —Ä—É—Å—Å–∫–∏–π ‚Üí –∞–Ω–≥–ª–∏–π—Å–∫–∏–π), –≤–≤–µ–¥–∏—Ç–µ —Å–ª–æ–≤–æ, –∞ –ø–µ—Ä–µ–≤–æ–¥ –¥–æ–±–∞–≤–∏—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —á–µ—Ä–µ–∑ LibreTranslate.

–ö–∞–∫ –Ω–∞—á–∞—Ç—å:
1Ô∏è‚É£ –ù–∞–∂–º–∏—Ç–µ ¬´–û—Ç–∫—Ä—ã—Ç—å –∫–∞—Ä—Ç–æ—á–∫–∏¬ª, —á—Ç–æ–±—ã –∑–∞–ø—É—Å—Ç–∏—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
2Ô∏è‚É£ –ù–∞–∂–º–∏—Ç–µ ¬´–°–æ–∑–¥–∞—Ç—å –∫–æ–ª–æ–¥—É¬ª –∏ –≤—ã–±–µ—Ä–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ.
3Ô∏è‚É£ –î–ª—è —è–∑—ã–∫–æ–≤–æ–π –∫–æ–ª–æ–¥—ã –æ—Ç–º–µ—Ç—å—Ç–µ ‚úÖ "–Ø–∑—ã–∫–æ–≤–∞—è –∫–æ–ª–æ–¥–∞" –∏ –≤—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫–∏.
4Ô∏è‚É£ –î–æ–±–∞–≤–ª—è–π—Ç–µ –∫–∞—Ä—Ç–æ—á–∫–∏ –∏ –∏–∑—É—á–∞–π—Ç–µ —Å–≤–∞–π–ø–∞–º–∏: –≤–ø—Ä–∞–≤–æ ‚Äî –∑–Ω–∞—é, –≤–ª–µ–≤–æ ‚Äî –ø–æ–≤—Ç–æ—Ä–∏—Ç—å.

–•–æ—á—Ç–∏—Ç–µ –ø–æ—Å—Ç–∞–≤–∏—Ç—å —Å–µ–±–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ? 
/notify - –∑–∞–¥–∞—Ç—å –∏–ª–∏ –∏–∑–º–µ–Ω–∏—Ç—å –≤—Ä–µ–º—è –¥–ª—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π.
/cancel - –æ—Ç–º–µ–Ω–∏—Ç—å –∑–∞–¥–∞–Ω–Ω—ã–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è.
–ë–æ—Ç –±—É–¥–µ—Ç –ø—Ä–∏—Å—ã–ª–∞—Ç—å –í–∞–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ –∑–∞–¥–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è!

–£—á–∏—Ç–µ—Å—å –ª–µ–≥–∫–æ –∏ —Å —É–¥–æ–≤–æ–ª—å—Å—Ç–≤–∏–µ–º! üöÄ
"""

class TimeInput(StatesGroup):
    waiting_for_time = State()

@dp.message(Command("start"))
async def start(message: Message):
    logger.info(f"Received /start command from user: {message.from_user.id}")
    # –î–∏–Ω–∞–º–∏—á–µ—Å–∫–∏ –¥–æ–±–∞–≤–ª—è–µ–º telegram_id –≤ URL
    web_app_url = f"https://flashcardsapp.ru?telegram_id={message.from_user.id}"
    keyboard = types.ReplyKeyboardMarkup(
        keyboard=[
            [types.KeyboardButton(
                text="–û—Ç–∫—Ä—ã—Ç—å –∫–∞—Ä—Ç–æ—á–∫–∏",
                web_app=WebAppInfo(url=web_app_url)
            )]
        ],
        resize_keyboard=True
    )
    await message.answer(
        '–ù–∞–ø–∏—à–∏—Ç–µ /info, —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å –æ –Ω–∞—à–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏.\n–ù–∞–∂–º–∏—Ç–µ ¬´–û—Ç–∫—Ä—ã—Ç—å –∫–∞—Ä—Ç–æ—á–∫–∏¬ª, —á—Ç–æ–±—ã –∑–∞–ø—É—Å—Ç–∏—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ:',
        reply_markup=keyboard
    )

@dp.message(Command("info"))
async def info(message: Message):
    logger.info(f"Received /info command from user: {message.from_user.id}")
    await message.answer(INFO_TEXT)

@dp.message(Command("notify"))
async def cmd_notify(message: types.Message, state: FSMContext):
    await message.reply("–í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –µ–∂–µ–¥–Ω–µ–≤–Ω—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ß–ß:–ú–ú (–Ω–∞–ø—Ä–∏–º–µ—Ä, 14:30):")
    await state.set_state(TimeInput.waiting_for_time)

@dp.message(TimeInput.waiting_for_time)
async def process_time(message: types.Message, state: FSMContext):
    chat_id = message.chat.id
    time_str = message.text

    if re.match(r'^\d{2}:\d{2}$', time_str):
        try:
            hours, minutes = map(int, time_str.split(':'))
            if 0 <= hours <= 23 and 0 <= minutes <= 59:
                users[chat_id] = {
                    "time": time_str,
                    "enabled": True
                }
                await message.reply(f"–ï–∂–µ–¥–Ω–µ–≤–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã –Ω–∞ {time_str}")
                await state.clear()
            else:
                await message.reply("–û—à–∏–±–∫–∞: –í—Ä–µ–º—è –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ 00:00-23:59. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:")
        except ValueError:
            await message.reply("–û—à–∏–±–∫–∞: –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ß–ß:–ú–ú (–Ω–∞–ø—Ä–∏–º–µ—Ä, 14:30):")
    else:
        await message.reply("–û—à–∏–±–∫–∞: –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç –ß–ß:–ú–ú (–Ω–∞–ø—Ä–∏–º–µ—Ä, 14:30). –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:")

@dp.message(Command("cancel"))
async def cmd_cancel(message: types.Message):
    chat_id = message.chat.id
    users[chat_id] = {"time": None, "enabled": False}
    await message.reply("–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ—Ç–∫–ª—é—á–µ–Ω—ã.")

async def check_time_and_notify():
    while True:
        now = datetime.now(pytz.timezone('Europe/Moscow'))
        current_time = now.strftime("%H:%M")

        users_to_notify = [
            chat_id for chat_id, user_data in users.items()
            if user_data["enabled"] and user_data["time"] == current_time
        ]

        if users_to_notify:
            for chat_id in users_to_notify:
                try:
                    await bot.send_message(chat_id=chat_id, text=NOTIFICATION_MESSAGE)
                    logger.info(f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –¥–ª—è {chat_id} –≤ {current_time}")
                except Exception as e:
                    logger.info(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –¥–ª—è {chat_id}: {e}")
            await asyncio.sleep(60)
        else:
            await asyncio.sleep(10)

async def main():
    asyncio.create_task(check_time_and_notify())
    logger.info("Starting bot polling...")
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())