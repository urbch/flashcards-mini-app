services:
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    ports:
      - "5173:5173"
    depends_on:
      - api
    environment:
      - NODE_ENV=development
    volumes:
      - ./frontend:/app
      - /app/node_modules

  api:
    build:
      context: ./api
      dockerfile: Dockerfile
    ports:
      - "8080:8080"
    env_file:
      - .env
    depends_on:
      - postgres
      - translate
    networks:
      - app-network
    volumes:
      - ./api:/app
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:8080" ]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s

  bot:
    build:
      context: ./bot
      dockerfile: Dockerfile
    env_file:
      - .env
    depends_on:
      - api
    networks:
      - app-network
    volumes:
      - ./bot:/app
    command: python main.py
    restart: unless-stopped

  postgres:
    image: postgres:15-alpine
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=1234
      - POSTGRES_DB=flashcards
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    networks:
      - app-network
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U postgres -d flashcards" ]
      interval: 5s
      timeout: 5s
      retries: 5

  translate:
    image: libretranslate/libretranslate:v1.6.0
    restart: unless-stopped
    ports:
      - "5001:5000"
    env_file:
      - stack.env
    volumes:
      - libretranslate_api_keys:/app/db
      - libretranslate_models:/home/libretranslate/.local:rw
    tty: true
    stdin_open: true
    healthcheck:
      test: ['CMD-SHELL', './venv/bin/python scripts/healthcheck.py']
    environment:
      - LT_LOAD_ONLY=ru,en
    networks:
      - app-network

volumes:
  postgres_data:
  libretranslate_models:
  libretranslate_api_keys:

networks:
  app-network:
    driver: bridge

